// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  studentSessions StudentSession[]
  emails      Email[]
  meetings    Meeting[]

  @@map("students")
}

model Class {
  id          String   @id @default(cuid())
  name        String
  subject     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  sessions    Session[]
  topics      Topic[]

  @@map("classes")
}

model Topic {
  id          String   @id @default(cuid())
  name        String
  classId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  class       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  sessions    Session[]

  @@map("topics")
}

model Session {
  id          String   @id @default(cuid())
  classId     String
  topicId     String
  date        DateTime
  duration    Int      // in minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  class       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  studentSessions StudentSession[]

  @@map("sessions")
}

model StudentSession {
  id                String   @id @default(cuid())
  studentId         String
  sessionId         String
  engagement        Float    // 0-100
  distractedness    Float    // 0-100
  confusion         Float    // 0-100
  boredom           Float    // 0-100
  confusionIncidents Int     @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  student           Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  session           Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([studentId, sessionId])
  @@map("student_sessions")
}

model Email {
  id          String      @id @default(cuid())
  studentId   String
  type        EmailType
  subject     String
  content     String
  status      EmailStatus @default(PENDING)
  priority    Priority    @default(MEDIUM)
  scheduledFor DateTime?
  sentAt      DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  student     Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("emails")
}

model Meeting {
  id          String        @id @default(cuid())
  studentId   String
  title       String
  description String?
  scheduledFor DateTime
  status      MeetingStatus @default(SCHEDULED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relationships
  student     Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("meetings")
}

model EmailTemplate {
  id          String      @id @default(cuid())
  name        String
  type        EmailType
  subject     String
  content     String
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  thresholds  EngagementThreshold[]

  @@map("email_templates")
}

model EngagementThreshold {
  id              String   @id @default(cuid())
  metric          String   // 'engagement', 'distractedness', 'confusion', 'boredom'
  threshold       Float
  action          String   // 'email', 'meeting', 'both'
  emailTemplateId String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  emailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id])

  @@map("engagement_thresholds")
}

enum EmailType {
  MEETING_REQUEST
  ENCOURAGEMENT
  REMINDER
  AT_RISK_ALERT
  CONFUSION_ALERT
  CUSTOM
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  SCHEDULED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MeetingStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}
